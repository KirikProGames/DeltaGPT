from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import os
import json
import uuid
import hashlib
import secrets
from datetime import datetime
from typing import List, Dict, Optional
import uvicorn
import random
from openai import OpenAI  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK

app = FastAPI(title="DELTAGPT - Advanced AI Assistant")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# API –∫–ª—é—á–∏ - DeepSeek + OpenRouter
DEEPSEEK_API_KEY = "sk-29b953857b824c7f949e0f2b4a2c2f86"  # –í–∞—à –∫–ª—é—á
OPENROUTER_KEYS = [
    os.getenv("OPENROUTER_KEY_1"),
    os.getenv("OPENROUTER_KEY_2")
]
OPENROUTER_KEYS = [key for key in OPENROUTER_KEYS if key]

print("üîë –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –∫–ª—é—á–µ–π:")
print(f"   DeepSeek: {DEEPSEEK_API_KEY[:20]}...")
print(f"   OpenRouter: {len(OPENROUTER_KEYS)} –∫–ª—é—á–µ–π")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek –∫–ª–∏–µ–Ω—Ç–∞
deepseek_client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
CHATS_FILE = "chats.json"
USERS_FILE = "users.json"

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –º–µ—Ç–æ–¥–∞ try_deepseek_api)

class DeltaGPT:
    # ... (–≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    
    async def try_deepseek_api(self, messages: List[Dict], max_tokens: int, temperature: float) -> Dict:
        """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK"""
        try:
            print("üîÑ –ü—Ä–æ–±—É–µ–º DeepSeek API (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK)...")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è DeepSeek
            deepseek_messages = []
            for msg in messages[-10:]:
                deepseek_messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK –∫–∞–∫ –≤ –≥–∞–π–¥–µ
            response = deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=deepseek_messages,
                max_tokens=max_tokens,
                temperature=temperature,
                stream=False
            )
            
            print(f"‚úÖ DeepSeek –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            return {
                "success": True,
                "response": response.choices[0].message.content,
                "tokens_used": response.usage.total_tokens if response.usage else self.estimate_tokens(response.choices[0].message.content),
                "model": "deepseek-chat"
            }
                    
        except Exception as e:
            error_msg = f"DeepSeek Exception: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {"success": False, "error": error_msg}
    
    async def try_openrouter_api(self, messages: List[Dict], model: str, max_tokens: int, temperature: float) -> Dict:
        """–ó–∞–ø—Ä–æ—Å –∫ OpenRouter API (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)"""
        try:
            if not OPENROUTER_KEYS:
                return {"success": False, "error": "No OpenRouter keys"}
            
            import httpx  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è OpenRouter
            
            api_key = random.choice(OPENROUTER_KEYS)
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º {model}...")
            
            openai_messages = []
            for msg in messages[-8:]:
                openai_messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    url="https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {api_key}",
                        "Content-Type": "application/json",
                        "HTTP-Referer": "https://deltagpt.onrender.com",
                        "X-Title": "DELTAGPT",
                    },
                    json={
                        "model": model,
                        "messages": openai_messages,
                        "max_tokens": max_tokens,
                        "temperature": temperature
                    },
                    timeout=20.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return {
                        "success": True,
                        "response": data["choices"][0]["message"]["content"],
                        "tokens_used": data.get("usage", {}).get("total_tokens", 0),
                        "model": model
                    }
                else:
                    return {
                        "success": False,
                        "error": f"OpenRouter {response.status_code}: {response.text[:100]}"
                    }
                    
        except Exception as e:
            return {"success": False, "error": str(e)}

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
deltagpt = DeltaGPT()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
